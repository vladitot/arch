<?php
//
//namespace Vladitot\Architect\YamlComponents;
//
//use Vladitot\Architect\AbstractGenerator;
//use Vladitot\Architect\AddArrayConvertingToClass;
//use Vladitot\Architect\NamespaceAndPathGenerator;
//use App\Models\Ddv1Controller;
//use App\Models\Ddv1ControllerInputParam;
//use App\Models\Ddv1ControllerMethod;
//use App\Models\Ddv1ControllerOutputParam;
//use App\Models\Ddv1Module;
//use Nette\PhpGenerator\ClassType;
//use Nette\PhpGenerator\Method;
//use Nette\PhpGenerator\PhpNamespace;
//
//class ControllerGeneratorOld extends AbstractGenerator
//{
//
//    public function generate()
//    {
//        $controllers = Ddv1Module::whereId($this->moduleId)->first()->ddv1Controllers;
//
//        foreach ($controllers as $controller) {
//            $this->generateOneController($controller);
//        }
//    }
//
//    public function generateOneController(Ddv1Controller $controller)
//    {
//        $filePathOfController = NamespaceAndPathGenerator::generateControllerPath(
//            $this->projectTitle,
//            $this->architectureTitle,
//            $this->moduleTitle,
//            $controller->title.'Controller',
//        );
//
//        if (file_exists($filePathOfController)) {
//            $class = \Nette\PhpGenerator\ClassType::fromCode(file_get_contents($filePathOfController));
//        } else {
//            $class = new ClassType($controller->title.'Controller');
//        }
//        foreach ($class->getMethods() as $method) {
//            if ($method->isPublic()) {
//                $method->setComment('@deprecated');
//            }
//        }
//
//        $class->setComment('@architect controllerId: '.$controller->id."\n".$controller->comment ?? '');
//
//        $namespace = new PhpNamespace(
//            NamespaceAndPathGenerator::generateControllerNamespace(
//                $this->architectureTitle,
//                $this->moduleTitle,
//            )
//        );
//
//        $class->setExtends('\\App\\Http\\Controllers\\Controller');
//
//        $namespace->add($class);
//        $namespace->addUse('\\App\\Http\\Controllers\\Controller');
//
//        foreach ($controller->ddv1ControllerMethods as $method) {
//            if ($class->hasMethod($method->title)) {
//                $codedMethod = $class->getMethod($method->title);
//                $codedMethod->setParameters([]);
//                $codedMethod->setReturnType(null);
//            } else {
//                $codedMethod = $class->addMethod($method->title);
//            }
//            $codedMethod->setComment('@architect controllerMethodId: '.$method->id."\n".$method->comment ?? '');
//
//            $type = $this->createInputRequest($method->ddv1ControllerInputParams, $method->title);
//            $namespace->addUse($type);
//            $codedMethod->addParameter('request')
//                ->setType(
//                    $type
//                );
//            //инъектируем сервис
//            foreach ($method->ddv1Services as $service) {
//                if ($service->is_hyper!==true) throw new \Exception('You cannot inject this service. It is not "hyper".');
//                $serviceFullName = NamespaceAndPathGenerator::generateServiceNamespace(
//                    $this->architectureTitle,
//                    $this->moduleTitle
//                ).'\\'.$service->title.'Service';
//
//                $namespace->addUse($serviceFullName);
//
//                $codedMethod->addParameter(lcfirst($service->title).'Service')
//                    ->setType($serviceFullName);
//            }
//            //инъектируем сервис
//
//            if ($method->ddv1ControllerOutputParams->count() == 0) {
//                $returnType = $this->createEmptyResource($method->title);
//                $codedMethod->setReturnType('\\'.$returnType);
//                $namespace->addUse('\\'.$returnType);
//            } else {
//                $returnType = $this->createOutputResource($method->ddv1ControllerOutputParams, $method->title);
//                $namespace->addUse($returnType);
//                $codedMethod->setReturnType(
//                    $returnType
//                );
//            }
//        }
//
//        $file = new \Nette\PhpGenerator\PhpFile;
//        $file->addComment('This file is generated by architect.');
//        $file->addNamespace($namespace);
//
//        @mkdir(dirname($filePathOfController), recursive: true);
//        file_put_contents($filePathOfController, $file);
//
//        $this->generateTestsForController($controller);
//
//        return $filePathOfController;
//
//    }
//
//    /**
//     * @param Method $method
//     * @param Ddv1ControllerInputParam[] $inputParams
//     * @return void
//     */
//    private function createInputRequest(\Traversable $inputParams, string $methodName): string
//    {
//        $request = new ClassType(ucfirst($methodName).'Request');
//
//        $request->setExtends('\\Illuminate\\Foundation\\Http\\FormRequest');
//
//        $this->putValidatorInObject($inputParams, $request);
//
//        $namespace = new PhpNamespace(NamespaceAndPathGenerator::generateControllerRequestNamespace(
//            $this->architectureTitle,
//            $this->moduleTitle,
//        ));
//
//        $namespace->addUse('\\Illuminate\\Foundation\\Http\\FormRequest');
//
//        $namespace->add($request);
//
//        $path = NamespaceAndPathGenerator::generateControllerRequestPath($this->projectTitle,
//            $this->architectureTitle,
//            $this->moduleTitle,
//            ucfirst($methodName).'Request');
//
//        $file = new \Nette\PhpGenerator\PhpFile;
//        $file->addComment('This file is generated by architect.');
//        $file->addNamespace($namespace);
//
//        @mkdir(dirname($path), recursive: true);
//        file_put_contents($path, $file);
//
//        return $namespace->getName().'\\'.$request->getName();
//
//    }
//
//    /**
//     * @param Method $method
//     * @param Ddv1ControllerOutputParam[] $outputParams
//     * @param string $methodName
//     * @return void
//     */
//    private function createOutputResource(\Traversable $outputParams, string $methodName):string
//    {
//        $class = new ClassType(ucfirst($methodName).'JsonResource');
//        $namespace = new PhpNamespace(NamespaceAndPathGenerator::generateControllerResourceNamespace(
//            $this->architectureTitle,
//            $this->moduleTitle,
//        ));
//        $class->setExtends('\\Illuminate\\Http\\Resources\\Json\\JsonResource');
//        $namespace->addUse('\\Illuminate\\Http\\Resources\\Json\\JsonResource');
//
//        $class->addProperty('wrap')
//            ->setStatic()
//            ->setPublic()
//            ->setValue('result');
//
//        $class->addProperty('with')
//            ->setPublic()
//            ->setValue(['error' => null]);
//
//        $toArrayMethod = $class->addMethod('toArray')
//            ->setPublic();
//        $toArrayMethod
//            ->addParameter('request');
//
//        $toArrayBody = 'return ['."\n";
//        $dtoResource = $this->prepareDtoForJsonResource($methodName, $outputParams);
//
//        $class->addComment('@property \\'.$dtoResource.' $resource');
//
//        foreach ($outputParams as $param) {
//            $toArrayBody .= "'".$param->title."' => ".'$this->resource->'.$param->title.','."\n";
//        }
//
//        $toArrayBody .='];';
//
//        $toArrayMethod->setBody($toArrayBody);
//
//        $path = NamespaceAndPathGenerator::generateControllerResourcePath($this->projectTitle,
//            $this->architectureTitle,
//            $this->moduleTitle,
//            ucfirst($methodName).'JsonResource');
//
//        $namespace->add($class);
//
//        $file = new \Nette\PhpGenerator\PhpFile;
//        $file->addComment('This file is generated by architect.');
//        $file->addNamespace($namespace);
//
//        @mkdir(dirname($path), recursive: true);
//        file_put_contents($path, $file);
//
//        return $namespace->getName().'\\'.$class->getName();
//
//    }
//
//    private function createEmptyResource(string $methodName)
//    {
//        $class = new ClassType(ucfirst($methodName).'EmptyResource');
//        $namespace = new PhpNamespace(NamespaceAndPathGenerator::generateControllerResourceNamespace(
//            $this->architectureTitle,
//            $this->moduleTitle,
//        ));
//        $class->setExtends('\\Illuminate\\Http\\Resources\\Json\\JsonResource');
//        $namespace->addUse('\\Illuminate\\Http\\Resources\\Json\\JsonResource');
//
//        $class->addProperty('wrap')
//            ->setStatic()
//            ->setPublic()
//            ->setValue('result');
//
//        $class->addProperty('with')
//            ->setPublic()
//            ->setValue(['error' => null]);
//
//        $class->addMethod('toArray')
//            ->setPublic()
//            ->setBody('
//            return [];
//            ')
//            ->addParameter('request');
//
//        $path = NamespaceAndPathGenerator::generateControllerResourcePath($this->projectTitle,
//            $this->architectureTitle,
//            $this->moduleTitle,
//            ucfirst($methodName).'EmptyResource.php');
//
//        $namespace->add($class);
//
//        $file = new \Nette\PhpGenerator\PhpFile;
//        $file->addComment('This file is generated by architect.');
//        $file->addNamespace($namespace);
//
//        @mkdir(dirname($path), recursive: true);
//        file_put_contents($path, $file);
//
//        return $namespace->getName().'\\'.$class->getName();
//
//    }
//
//    private function prepareDtoForJsonResource(string $methodName, \Traversable|array $outputParams, $dtoPrefix = '')
//    {
//        $class = new ClassType(ucfirst($dtoPrefix).ucfirst($methodName).'ResourceDto');
//        $namespace = new PhpNamespace(NamespaceAndPathGenerator::generateControllerResourceNamespace(
//            $this->architectureTitle,
//            $this->moduleTitle,
//        ));
//
//        $namespace->add($class);
//        $keysArrays = [];
//        /** @var Ddv1ControllerOutputParam $param */
//        foreach ($outputParams as $param) {
//            if ($param->childrenControllerOutputParams()->count()==0) {
//                if ($class->hasProperty($param->title)) {
//                    $property = $class->getProperty($param->title);
//                } else {
//                    $property = $class->addProperty($param->title);
//                }
//                $property
//                    ->setPublic()
//                    ->setType($param->ddv1VariableTypes->title);
//            } else {
//                $type = $this->prepareDtoForJsonResource(
//                    $methodName, $param->childrenControllerOutputParams, $dtoPrefix.ucfirst($param->title)
//                );
//                $class->addProperty($param->title)
//                    ->setPublic()
//                    ->setType('array')
//                    ->addComment('@param \\'.$type.'[] $'.$param->title);
//                $keysArrays[$param->title] = '\\'.$type;
//            }
//        }
//
//        AddArrayConvertingToClass::addToArrayMethodsToClass($class, $keysArrays);
//
//        $path = NamespaceAndPathGenerator::generateControllerResourcePath($this->projectTitle,
//            $this->architectureTitle,
//            $this->moduleTitle,
//            ucfirst($dtoPrefix).ucfirst($methodName).'ResourceDto');
//
//        $file = new \Nette\PhpGenerator\PhpFile;
//        $file->addComment('This file is generated by architect.');
//        $file->addNamespace($namespace);
//
//        @mkdir(dirname($path), recursive: true);
//        file_put_contents($path, $file);
//
//        return $namespace->getName().'\\'.$class->getName();
//    }
//
//
//    private function getTestCasesForController() {
//        return [
//            '200', '201', '204', '400', '401', '403', '404', '405', '422', '500'
//        ];
//    }
//
//    private function generateTestsForController(Ddv1Controller $controller) {
//        $controllerTestPath = NamespaceAndPathGenerator::generateControllerTestPath(
//            $this->projectTitle,
//            $this->architectureTitle,
//            $this->moduleTitle,
//            $controller->title.'ControllerTest',
//        );
//
//        $controllerTestNamespace = new PhpNamespace(
//            NamespaceAndPathGenerator::generateControllerTestNamespace(
//                $this->projectTitle,
//                $this->architectureTitle,
//            )
//        );
//
//        if (file_exists($controllerTestPath)) {
//            $testClass = \Nette\PhpGenerator\ClassType::fromCode(file_get_contents($controllerTestPath));
//        } else {
//            $testClass = new ClassType($controller->title.'ControllerTest');
//        }
//
//        $controllerTestNamespace->add($testClass);
//
//        $testClass->setExtends('\\Tests\\TestCase');
//        $controllerTestNamespace->addUse('\\Tests\\TestCase');
//
//        foreach ($controller->ddv1ControllerMethods as $method) {
//            if ($testClass->hasMethod('test'.$method->title)) continue;
//            $testMethod = $testClass->addMethod('test'.$method->title);
//            $testMethod->addComment('@test');
//            $testMethod->addComment('@dataProvider '.$method->title.'DataProvider');
//
//
//            $dataProviderMethod = $testClass->addMethod($method->title.'DataProvider');
//            $dataProviderMethodBody = '';
//
//            $dataProviderMethodBody .= 'return ['."\n";
//            foreach ($this->getTestCasesForController() as $testCase) {
//                $dataProviderMethodBody .= $testCase.'=>['."\n";
//                $dataProviderMethodBody=$this->generateInputParamsForDataProviderRecursively($method->ddv1ControllerInputParams, $dataProviderMethodBody);
//                $dataProviderMethodBody .= '],'."\n";
//            }
//            $dataProviderMethodBody .= '];';
//            $dataProviderMethod->setBody($dataProviderMethodBody);
//
//
//            foreach ($method->ddv1ControllerInputParams as $inputParam) {
//                $testMethod->addParameter($inputParam->title)->setType($inputParam->ddv1VariableTypes->title);
//            }
//
//            $testBody = '';
//            foreach ($method->ddv1Services as $service) {
//                $serviceFullName = NamespaceAndPathGenerator::generateServiceNamespace(
//                        $this->architectureTitle,
//                        $this->moduleTitle
//                    ).'\\'.$service->title.'Service';
//
//                $controllerTestNamespace->addUse($serviceFullName);
//
//                $testBody .= '$'.lcfirst($service->title).'Service = $this->createMock('.$service->title.'Service'.'::class);'."\n";
//                $testBody .= '$this->app->instance('.$service->title.'Service'.'::class, $'.lcfirst($service->title).'Service);'."\n";
//
//                foreach ($service->ddv1ServiceMethods as $serviceMethod) {
//                    $testBody .= '$'.lcfirst($service->title).'Service->method(\''.$serviceMethod->title.'\')->willReturn(null);'."\n";
//                }
//            }
//            $testMethod->setBody($testBody);
//        }
//
//        $file = new \Nette\PhpGenerator\PhpFile;
//        $file->addComment('This file is generated by architect.');
//        $file->addNamespace($controllerTestNamespace);
//
//        @mkdir(dirname($controllerTestPath), recursive: true);
//        file_put_contents($controllerTestPath, $file);
//    }
//
//    /**
//     * @param \Traversable|Ddv1ControllerInputParam[] $inputParams
//     * @param string $dataProviderMethodBody
//     * @param int $level
//     * @return string
//     */
//    private function generateInputParamsForDataProviderRecursively(\Traversable $inputParams, string $dataProviderMethodBody, int $level = 0): string
//    {
//        $tabs = '';
//        for ($i=0; $i<=$level; $i++) {
//            $tabs .= "\t";
//        }
//        foreach ($inputParams as $input) {
//            if ($input->childrenControllerInputParams()->count()==0) {
//                $dataProviderMethodBody .= $tabs."'".$input->title."'=>'',\n";
//            } else {
//                $dataProviderMethodBody .= $tabs."'".$input->title."'=>[\n";
//                $dataProviderMethodBody = $this->generateInputParamsForDataProviderRecursively($input->childrenControllerInputParams, $dataProviderMethodBody, $level+1);
//                $dataProviderMethodBody .= "],\n";
//            }
//        }
//        return $dataProviderMethodBody;
//    }
//}
