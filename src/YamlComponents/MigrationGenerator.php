<?php

namespace Vladitot\Architect\YamlComponents;

use Vladitot\Architect\AbstractGenerator;
use Vladitot\Architect\NamespaceAndPathGeneratorYaml;
use Vladitot\Architect\Yaml\Laravel\AdditionalMigration;
use Vladitot\Architect\Yaml\Laravel\Model;
use Vladitot\Architect\Yaml\Module;
use Illuminate\Database\Migrations\Migration;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpNamespace;

class MigrationGenerator extends AbstractGenerator
{

    /**
     * @deprecated
     * @param string $title
     * @return string
     */
    public function createMigrationPath(string $moduleTitle, string $title){

        return NamespaceAndPathGeneratorYaml::generateMigrationPath(
            $moduleTitle,
            $title,
        );
    }

    /**
     * @deprecated
     */
    private function createMigrationNamespace(string $moduleTitle)
    {
        return NamespaceAndPathGeneratorYaml::generateMigrationNamespace(
            $moduleTitle,
        );
    }

    public function generate(Module $module)
    {
        $models = $module->models;

        $i=0;

        foreach ($models as $model) {
            if ($model->generate_migration) {
                $this->generateOneMigration($model, $module, $i);
            } else {
                $this->generateAdditionalMigrations($module->title, $model, $i);
            }
            $i++;
        }
    }

    public function generateAdditionalMigrations(string $moduleTitle, Model $model, int $number = 0) {
        $counter = $number;
        foreach ($model->additional_migrations as $additionalMigration) {
            $filePathOfMigration = $this->createMigrationPath(
                $moduleTitle, $number.'_'.$model->title.'_'.(++$counter).'_'.$additionalMigration->title
            );
            $namespaceOfMigration = $this->createMigrationNamespace(
                $moduleTitle
            );
            if (file_exists($filePathOfMigration)) {
                continue;
            }
            $class = new ClassType($this->createMigrationName($model->title.'Migration'));
            $namespace = new PhpNamespace($namespaceOfMigration);
            $namespace->add($class);
            $class->setExtends(Migration::class);
            $namespace->addUse(Migration::class);
            $namespace->addUse(\Illuminate\Database\Schema\Blueprint::class);
            $namespace->addUse(\Illuminate\Support\Facades\Schema::class);
            $this->fillAdditionalMigrationClass($class, $model, $moduleTitle, $additionalMigration);

            $file = new \Nette\PhpGenerator\PhpFile;
            $file->addComment('This file is generated by architect.');
            $file->addComment('AdditionalMigrationId: '."\n".$additionalMigration->comment);
            $file->addNamespace($namespace);

            @mkdir(dirname($filePathOfMigration), recursive: true);
            $content = (string) $file;
            $content = str_replace('class '.$model->title.'Migration extends Migration',
                'return new class extends Migration',
                $content);
            $content= preg_replace('/}\s*$/s', '};', $content);
            file_put_contents($filePathOfMigration, $content);
        }
    }

    public function generateOneMigration(Model $model, Module $module, int $number = 0) {
        $filePathOfMigration = $this->createMigrationPath($module->title, $number.'_'.$model->title);
        $namespaceOfMigration = $this->createMigrationNamespace($module->title);
        if (file_exists($filePathOfMigration)) {
            unlink($filePathOfMigration);
        }

        $namespace = new PhpNamespace($namespaceOfMigration);
        $class = new ClassType($this->createMigrationName($model->title.'Migration'));

        $class->setExtends(Migration::class);
        $namespace->addUse(Migration::class);

        $namespace->addUse(\Illuminate\Database\Schema\Blueprint::class);
        $namespace->addUse(\Illuminate\Support\Facades\Schema::class);

        $namespace->add($class);

        $this->fillMigrationClass($class, $model, $module);

        $file = new \Nette\PhpGenerator\PhpFile;
        $file->addComment('This file is generated by architect.');
        $file->addNamespace($namespace);

        @mkdir(dirname($filePathOfMigration), recursive: true);
        $content = (string) $file;
        $content = str_replace('class '.$model->title.'Migration extends Migration',
        'return new class extends Migration',
            $content);
        $content= preg_replace('/}\s*$/s', '};', $content);
        file_put_contents($filePathOfMigration, $content);

        return $filePathOfMigration;
    }

    private function createMigrationName(string $title): array|string
    {
        $title = str_replace('.','',
            str_replace(' ', '', ucfirst($title))
        );
        return $title;
    }

    private function fillMigrationClass(ClassType $class, Model $model, Module $module)
    {
        $upMethod = $class->addMethod('up');
        $downMethod = $class->addMethod('down');
        $tableName = NamespaceAndPathGeneratorYaml::generateTableNameFromModelName($model->title);
        $fields = $model->model_fields;
        $upBody = 'Schema::connection("'.NamespaceAndPathGeneratorYaml::convertStringToSnakeCase($module->title).'")->create(\''.$tableName.'\', function (Blueprint $table) {'."\n";


        foreach ($fields as $field) {
            if ($field->title=='id') {
                $upBody.='$table->bigIncrements("id");'."\n";
                continue;
            }
            $upBody.='    $table->'.$field->field_type.'(\''.$field->title.'\'';
            if (isset($field->additional_migration_argument) && trim($field->additional_migration_argument)!='') {
                $upBody.=', \''.$field->additional_migration_argument.'\')';
            } else {
                $upBody.=')';
            }
            if (isset($field->nullable)) {
                $upBody.='->nullable()';
            }
            if (isset($field->default) && trim($field->default)!='') {
                $upBody.='->default(\''.$field->default.'\')';
            }
            $upBody.=';'."\n";
        }
        $upMethod->setBody($upBody);
        $this->fillRelationsUp($class, $model, $module);

        $this->fillManyToManyRelation($class, $model, $module);

        $upMethod->addBody("\n".'});');

        $downBody = 'Schema::dropIfExists(\''.$tableName.'\');';
        $downMethod->setBody($downBody);



    }

    private function fillAdditionalMigrationClass(ClassType $class, Model $model, string $moduleTitle, AdditionalMigration $additionalMigration)
    {
        $upMethod = $class->addMethod('up');
        $downMethod = $class->addMethod('down');
        $tableName = NamespaceAndPathGeneratorYaml::generateTableNameFromModelName($model->title);

        $aiQuery = 'PHP, Laravel. Generate migration for application.'."\n";
        $aiQuery .= 'Connection name: '.NamespaceAndPathGeneratorYaml::convertStringToSnakeCase($moduleTitle).'.'."\n";
        $aiQuery .= 'Table name: '.$tableName.'.'."\n";
        $aiQuery .= $additionalMigration->comment."\n";

        $upBody = 'Schema::connection("'.NamespaceAndPathGeneratorYaml::convertStringToSnakeCase($moduleTitle).'")->table(\''.$tableName.'\', function (Blueprint $table) {'."\n";
//        $upBody.='throw new \\Exception("You forgot to fill method UP in additional migration for '.$moduleTitle.' Module");'."\n";
        $methodBody = $this->queryAiForAnswer($aiQuery);
        $matches = [];
        preg_match('/up\(\)\s+{\s*.*?{(.*?)}/s', $methodBody, $matches);
        $upBody.='throw new \Exception("You forgot to check this migration");'."\n";
        $upBody.=$matches[1];
        $upMethod->setBody($upBody);
        $upMethod->addBody("\n".'});');


        $downBody = 'Schema::connection("'.NamespaceAndPathGeneratorYaml::convertStringToSnakeCase($moduleTitle).'")->table(\''.$tableName.'\', function (Blueprint $table) {'."\n";
        $matches = [];
        preg_match('/down\(\)\s+{\s*.*?{(.*?)}/s', $methodBody, $matches);
        $downBody.='throw new \Exception("You forgot to check this migration");'."\n";
        $downBody.=$matches[1];
        $downMethod->setBody($downBody);
        $downMethod->addBody("\n".'});');
    }

    private function fillManyToManyRelation(ClassType $class, Model $model, Module $module)
    {
        $upMethod = $class->getMethod('up');
        foreach ($module->model_relations as $relation) {
            //перебираем релейшены, где эта модель слева
            if ($relation->left_model_name == $model->title) {
            if ($relation->relation_type == 'BelongsToMany') {
                $manyToManyTableName = NamespaceAndPathGeneratorYaml::generateTableNameFromModelName($relation->left_model_name)
                    . '_' . NamespaceAndPathGeneratorYaml::generateTableNameFromModelName($relation->right_model_name);
                $leftKeyId = NamespaceAndPathGeneratorYaml::convertStringToSnakeCase($relation->left_model_name) . "_id";
                $leftTableName = NamespaceAndPathGeneratorYaml::generateTableNameFromModelName($relation->left_model_name);

                $rightKeyId = NamespaceAndPathGeneratorYaml::convertStringToSnakeCase($relation->right_model_name) . "_id";
                $rightTableName = NamespaceAndPathGeneratorYaml::generateTableNameFromModelName($relation->right_model_name);

                $upMethod->addBody("\n");
                $upBody = 'Schema::create(\''
                    . $manyToManyTableName
                    . '\', function (Blueprint $table) {' . "\n";

                $upMethod->addBody(
                    "->foreign(
                    '" . $leftKeyId . "')
                ->references('id')
                ->on('" . $leftTableName . "');"
                );
                $upMethod->addBody(
                    "->foreign(
                    '" . $rightKeyId . "')
                ->references('id')
                ->on('" . $rightTableName . "');"
                );
                $upBody .= '});';
                $upMethod->addBody($upBody);

                $downMethodBody = $class->getMethod('down')->getBody();
                $downMethodBody = "\n" . 'Schema::dropIfExists(\''
                    . $manyToManyTableName . '\');'
                    . "\n"
                    . $downMethodBody;

                $class->getMethod('down')->setBody($downMethodBody);
                continue;
            }
        }
    }

    }

    private function fillRelationsUp(ClassType $class, Model $model, Module $module)
    {
        $upMethod = $class->getMethod('up');
        foreach ($module->model_relations as $relation) {
            //перебираем релейшены, где эта модель слева
            if ($relation->left_model_name == $model->title) {
                if ($relation->relation_type == 'BelongsTo') {
                    $upMethod->addBody("\n");
                    $modelFullName = NamespaceAndPathGeneratorYaml::generateModelNamespace(
                        $module->title,
                    );
                    $upMethod->addBody('$table->foreignIdFor(\\' . $modelFullName . '\\' . $relation->right_model_name . '::class);');
                    continue;
                }

            }
        }

        foreach ($module->model_relations as $relation) {
            //перебираем релейшены, где эта модель справа
            if ($relation->right_model_name == $model->title) {
                if ($relation->relation_type == 'HasOne') {
                    $upMethod->addBody("\n");
                    $modelFullName = NamespaceAndPathGeneratorYaml::generateModelNamespace(
                        $module->title,
                    );
                    $upMethod->addBody('$table->foreignIdFor(\\' . $modelFullName . '\\' . $relation->left_model_name . '::class);');
                    continue;
                }

                if ($relation->relation_type == 'HasMany') {
                    $upMethod->addBody("\n");
                    $modelFullName = NamespaceAndPathGeneratorYaml::generateModelNamespace(
                        $module->title,
                    );
                    $upMethod->addBody('$table->foreignIdFor(\\' . $modelFullName . '\\' . $relation->left_model_name . '::class);');
                    continue;
                }
            }
        }
    }
}
